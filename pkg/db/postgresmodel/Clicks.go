// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgresmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Click is an object representing the database table.
type Click struct {
	LinkID int       `boil:"LinkID" json:"LinkID" toml:"LinkID" yaml:"LinkID"`
	Time   time.Time `boil:"Time" json:"Time" toml:"Time" yaml:"Time"`

	R *clickR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clickL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClickColumns = struct {
	LinkID string
	Time   string
}{
	LinkID: "LinkID",
	Time:   "Time",
}

var ClickTableColumns = struct {
	LinkID string
	Time   string
}{
	LinkID: "Clicks.LinkID",
	Time:   "Clicks.Time",
}

// Generated where

var ClickWhere = struct {
	LinkID whereHelperint
	Time   whereHelpertime_Time
}{
	LinkID: whereHelperint{field: "\"Clicks\".\"LinkID\""},
	Time:   whereHelpertime_Time{field: "\"Clicks\".\"Time\""},
}

// ClickRels is where relationship names are stored.
var ClickRels = struct {
	LinkIDLink string
}{
	LinkIDLink: "LinkIDLink",
}

// clickR is where relationships are stored.
type clickR struct {
	LinkIDLink *Link `boil:"LinkIDLink" json:"LinkIDLink" toml:"LinkIDLink" yaml:"LinkIDLink"`
}

// NewStruct creates a new relationship struct
func (*clickR) NewStruct() *clickR {
	return &clickR{}
}

// clickL is where Load methods for each relationship are stored.
type clickL struct{}

var (
	clickAllColumns            = []string{"LinkID", "Time"}
	clickColumnsWithoutDefault = []string{"LinkID", "Time"}
	clickColumnsWithDefault    = []string{}
	clickPrimaryKeyColumns     = []string{"Time"}
)

type (
	// ClickSlice is an alias for a slice of pointers to Click.
	// This should almost always be used instead of []Click.
	ClickSlice []*Click
	// ClickHook is the signature for custom Click hook methods
	ClickHook func(context.Context, boil.ContextExecutor, *Click) error

	clickQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clickType                 = reflect.TypeOf(&Click{})
	clickMapping              = queries.MakeStructMapping(clickType)
	clickPrimaryKeyMapping, _ = queries.BindMapping(clickType, clickMapping, clickPrimaryKeyColumns)
	clickInsertCacheMut       sync.RWMutex
	clickInsertCache          = make(map[string]insertCache)
	clickUpdateCacheMut       sync.RWMutex
	clickUpdateCache          = make(map[string]updateCache)
	clickUpsertCacheMut       sync.RWMutex
	clickUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clickBeforeInsertHooks []ClickHook
var clickBeforeUpdateHooks []ClickHook
var clickBeforeDeleteHooks []ClickHook
var clickBeforeUpsertHooks []ClickHook

var clickAfterInsertHooks []ClickHook
var clickAfterSelectHooks []ClickHook
var clickAfterUpdateHooks []ClickHook
var clickAfterDeleteHooks []ClickHook
var clickAfterUpsertHooks []ClickHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Click) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clickBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Click) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clickBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Click) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clickBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Click) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clickBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Click) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clickAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Click) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clickAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Click) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clickAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Click) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clickAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Click) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clickAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClickHook registers your hook function for all future operations.
func AddClickHook(hookPoint boil.HookPoint, clickHook ClickHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clickBeforeInsertHooks = append(clickBeforeInsertHooks, clickHook)
	case boil.BeforeUpdateHook:
		clickBeforeUpdateHooks = append(clickBeforeUpdateHooks, clickHook)
	case boil.BeforeDeleteHook:
		clickBeforeDeleteHooks = append(clickBeforeDeleteHooks, clickHook)
	case boil.BeforeUpsertHook:
		clickBeforeUpsertHooks = append(clickBeforeUpsertHooks, clickHook)
	case boil.AfterInsertHook:
		clickAfterInsertHooks = append(clickAfterInsertHooks, clickHook)
	case boil.AfterSelectHook:
		clickAfterSelectHooks = append(clickAfterSelectHooks, clickHook)
	case boil.AfterUpdateHook:
		clickAfterUpdateHooks = append(clickAfterUpdateHooks, clickHook)
	case boil.AfterDeleteHook:
		clickAfterDeleteHooks = append(clickAfterDeleteHooks, clickHook)
	case boil.AfterUpsertHook:
		clickAfterUpsertHooks = append(clickAfterUpsertHooks, clickHook)
	}
}

// One returns a single click record from the query.
func (q clickQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Click, error) {
	o := &Click{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgresmodel: failed to execute a one query for Clicks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Click records from the query.
func (q clickQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClickSlice, error) {
	var o []*Click

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "postgresmodel: failed to assign all query results to Click slice")
	}

	if len(clickAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Click records in the query.
func (q clickQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: failed to count Clicks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clickQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "postgresmodel: failed to check if Clicks exists")
	}

	return count > 0, nil
}

// LinkIDLink pointed to by the foreign key.
func (o *Click) LinkIDLink(mods ...qm.QueryMod) linkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"LinkID\" = ?", o.LinkID),
	}

	queryMods = append(queryMods, mods...)

	query := Links(queryMods...)
	queries.SetFrom(query.Query, "\"Links\"")

	return query
}

// LoadLinkIDLink allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clickL) LoadLinkIDLink(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClick interface{}, mods queries.Applicator) error {
	var slice []*Click
	var object *Click

	if singular {
		object = maybeClick.(*Click)
	} else {
		slice = *maybeClick.(*[]*Click)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clickR{}
		}
		args = append(args, object.LinkID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clickR{}
			}

			for _, a := range args {
				if a == obj.LinkID {
					continue Outer
				}
			}

			args = append(args, obj.LinkID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Links`),
		qm.WhereIn(`Links.LinkID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Link")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Link")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Links")
	}

	if len(clickAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LinkIDLink = foreign
		if foreign.R == nil {
			foreign.R = &linkR{}
		}
		foreign.R.LinkIDClicks = append(foreign.R.LinkIDClicks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LinkID == foreign.LinkID {
				local.R.LinkIDLink = foreign
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.LinkIDClicks = append(foreign.R.LinkIDClicks, local)
				break
			}
		}
	}

	return nil
}

// SetLinkIDLink of the click to the related item.
// Sets o.R.LinkIDLink to related.
// Adds o to related.R.LinkIDClicks.
func (o *Click) SetLinkIDLink(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Link) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Clicks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"LinkID"}),
		strmangle.WhereClause("\"", "\"", 2, clickPrimaryKeyColumns),
	)
	values := []interface{}{related.LinkID, o.Time}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LinkID = related.LinkID
	if o.R == nil {
		o.R = &clickR{
			LinkIDLink: related,
		}
	} else {
		o.R.LinkIDLink = related
	}

	if related.R == nil {
		related.R = &linkR{
			LinkIDClicks: ClickSlice{o},
		}
	} else {
		related.R.LinkIDClicks = append(related.R.LinkIDClicks, o)
	}

	return nil
}

// Clicks retrieves all the records using an executor.
func Clicks(mods ...qm.QueryMod) clickQuery {
	mods = append(mods, qm.From("\"Clicks\""))
	return clickQuery{NewQuery(mods...)}
}

// FindClick retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClick(ctx context.Context, exec boil.ContextExecutor, time time.Time, selectCols ...string) (*Click, error) {
	clickObj := &Click{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Clicks\" where \"Time\"=$1", sel,
	)

	q := queries.Raw(query, time)

	err := q.Bind(ctx, exec, clickObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "postgresmodel: unable to select from Clicks")
	}

	if err = clickObj.doAfterSelectHooks(ctx, exec); err != nil {
		return clickObj, err
	}

	return clickObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Click) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("postgresmodel: no Clicks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clickColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clickInsertCacheMut.RLock()
	cache, cached := clickInsertCache[key]
	clickInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clickAllColumns,
			clickColumnsWithDefault,
			clickColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clickType, clickMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clickType, clickMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Clicks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Clicks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "postgresmodel: unable to insert into Clicks")
	}

	if !cached {
		clickInsertCacheMut.Lock()
		clickInsertCache[key] = cache
		clickInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Click.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Click) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clickUpdateCacheMut.RLock()
	cache, cached := clickUpdateCache[key]
	clickUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clickAllColumns,
			clickPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("postgresmodel: unable to update Clicks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Clicks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, clickPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clickType, clickMapping, append(wl, clickPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: unable to update Clicks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: failed to get rows affected by update for Clicks")
	}

	if !cached {
		clickUpdateCacheMut.Lock()
		clickUpdateCache[key] = cache
		clickUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clickQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: unable to update all for Clicks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: unable to retrieve rows affected for Clicks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClickSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("postgresmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Clicks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, clickPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: unable to update all in click slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: unable to retrieve rows affected all in update all click")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Click) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("postgresmodel: no Clicks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clickColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clickUpsertCacheMut.RLock()
	cache, cached := clickUpsertCache[key]
	clickUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clickAllColumns,
			clickColumnsWithDefault,
			clickColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			clickAllColumns,
			clickPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("postgresmodel: unable to upsert Clicks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(clickPrimaryKeyColumns))
			copy(conflict, clickPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Clicks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(clickType, clickMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clickType, clickMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "postgresmodel: unable to upsert Clicks")
	}

	if !cached {
		clickUpsertCacheMut.Lock()
		clickUpsertCache[key] = cache
		clickUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Click record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Click) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("postgresmodel: no Click provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clickPrimaryKeyMapping)
	sql := "DELETE FROM \"Clicks\" WHERE \"Time\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: unable to delete from Clicks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: failed to get rows affected by delete for Clicks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clickQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("postgresmodel: no clickQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: unable to delete all from Clicks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: failed to get rows affected by deleteall for Clicks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClickSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clickBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Clicks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clickPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: unable to delete all from click slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "postgresmodel: failed to get rows affected by deleteall for Clicks")
	}

	if len(clickAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Click) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClick(ctx, exec, o.Time)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClickSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClickSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Clicks\".* FROM \"Clicks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clickPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "postgresmodel: unable to reload all in ClickSlice")
	}

	*o = slice

	return nil
}

// ClickExists checks if the Click row exists.
func ClickExists(ctx context.Context, exec boil.ContextExecutor, time time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Clicks\" where \"Time\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time)
	}
	row := exec.QueryRowContext(ctx, sql, time)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "postgresmodel: unable to check if Clicks exists")
	}

	return exists, nil
}
